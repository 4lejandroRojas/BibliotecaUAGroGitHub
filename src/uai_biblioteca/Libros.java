package uai_biblioteca;

import java.awt.Image;
import java.awt.Toolkit;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

public class Libros extends javax.swing.JFrame {
Conexion cn;


    public Libros() throws Exception {
        initComponents();
         cn = new Conexion();
        HabilitaTesis(false);
        LlenarEditoriales();
        tFVolumen.setText("1");
        tFTomo.setText("1");
        tFSignatura.setText("N/A");     
        setLocationRelativeTo(null);
        setResizable(false);
    }
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("img/libros.png"));
        return retValue;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCurves1 = new org.edisoncor.gui.panel.PanelCurves();
        jLabel1 = new javax.swing.JLabel();
        jPLibro = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jCBTipo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        tFTitulo = new org.edisoncor.gui.textField.TextFieldRectBackground();
        tFAutor = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tFVolumen = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel6 = new javax.swing.JLabel();
        tFTomo = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel7 = new javax.swing.JLabel();
        tFEdicion = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel8 = new javax.swing.JLabel();
        tFYear = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel9 = new javax.swing.JLabel();
        jCBEditorial = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        tFSignatura = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel11 = new javax.swing.JLabel();
        tFISBN = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel12 = new javax.swing.JLabel();
        tFEjemplares = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel16 = new javax.swing.JLabel();
        jCBCivil = new javax.swing.JCheckBox();
        jCBComp = new javax.swing.JCheckBox();
        jCBTopo = new javax.swing.JCheckBox();
        jCBConst = new javax.swing.JCheckBox();
        jPTesis = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jCBGrado = new javax.swing.JComboBox<>();
        tFDirector = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jCBModalidad = new javax.swing.JComboBox<>();
        jBCancelar = new javax.swing.JButton();
        jBGuardar = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAObservaciones = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMRegistrados = new javax.swing.JMenu();
        jMSalir = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registro de Libros");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(getIconImage());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logos/Libros.png"))); // NOI18N
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        panelCurves1.add(jLabel1, java.awt.BorderLayout.CENTER);

        jPLibro.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Datos del Libro", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Tipo:");

        jCBTipo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCBTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LIBRO", "TESIS" }));
        jCBTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBTipoActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Titulo:");

        tFTitulo.setDescripcion("Nombre del Libro/Tesis");
        tFTitulo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tFTitulo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tFTituloKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tFTituloKeyTyped(evt);
            }
        });

        tFAutor.setDescripcion("Nombre del Autor");
        tFAutor.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tFAutor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tFAutorKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tFAutorKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Autor:");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Volumen:");

        tFVolumen.setDescripcion("Número del volumen");
        tFVolumen.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tFVolumen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tFVolumenKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("Tomo:");

        tFTomo.setDescripcion("Número del tomo");
        tFTomo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tFTomo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tFTomoKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("Edición:");

        tFEdicion.setDescripcion("Número de edición");
        tFEdicion.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tFEdicion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tFEdicionKeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setText("Año:");

        tFYear.setDescripcion("Número de edición");
        tFYear.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tFYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tFYearKeyTyped(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("Editorial:");

        jCBEditorial.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCBEditorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBEditorialActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setText("Sig. Topo:");

        tFSignatura.setDescripcion("Signatura Topográfica");
        tFSignatura.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tFSignatura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tFSignaturaKeyReleased(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel11.setText("ISBN:");

        tFISBN.setDescripcion("ISBN");
        tFISBN.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tFISBN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tFISBNKeyReleased(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel12.setText("Ejemplares:");

        tFEjemplares.setDescripcion("Número");
        tFEjemplares.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tFEjemplares.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tFEjemplaresKeyTyped(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel16.setText("Area:");

        jCBCivil.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCBCivil.setText("Civil");

        jCBComp.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCBComp.setText("Comp.");

        jCBTopo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCBTopo.setText("Topo.");

        jCBConst.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCBConst.setText("Const.");

        javax.swing.GroupLayout jPLibroLayout = new javax.swing.GroupLayout(jPLibro);
        jPLibro.setLayout(jPLibroLayout);
        jPLibroLayout.setHorizontalGroup(
            jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPLibroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPLibroLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                        .addComponent(jCBTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPLibroLayout.createSequentialGroup()
                        .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel16))
                        .addGap(23, 23, 23)
                        .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tFAutor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tFTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tFVolumen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tFTomo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tFYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCBEditorial, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tFSignatura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tFISBN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tFEdicion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPLibroLayout.createSequentialGroup()
                                .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tFEjemplares, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPLibroLayout.createSequentialGroup()
                                        .addComponent(jCBCivil)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jCBComp)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCBTopo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCBConst)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(10, 10, 10))
        );
        jPLibroLayout.setVerticalGroup(
            jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPLibroLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCBTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tFTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tFAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tFVolumen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(tFTomo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(tFEdicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(tFYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jCBCivil)
                    .addComponent(jCBComp)
                    .addComponent(jCBTopo)
                    .addComponent(jCBConst))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jCBEditorial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(tFSignatura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(tFISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPLibroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(tFEjemplares, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPTesis.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Datos complementarios de Tesis", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setText("Grado:");

        jCBGrado.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCBGrado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LICENCIATURA", "MAESTRIA" }));

        tFDirector.setDescripcion("Director de Tesis");
        tFDirector.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tFDirector.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tFDirectorKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tFDirectorKeyTyped(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel14.setText("Director:");

        jLabel15.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel15.setText("Modalidad:");

        jCBModalidad.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jCBModalidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TRABAJO DE INVESTIGACION", "SEMINARIO DE TITULACION" }));

        javax.swing.GroupLayout jPTesisLayout = new javax.swing.GroupLayout(jPTesis);
        jPTesis.setLayout(jPTesisLayout);
        jPTesisLayout.setHorizontalGroup(
            jPTesisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPTesisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPTesisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(jPTesisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCBGrado, 0, 257, Short.MAX_VALUE)
                    .addComponent(jCBModalidad, 0, 257, Short.MAX_VALUE)
                    .addComponent(tFDirector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPTesisLayout.setVerticalGroup(
            jPTesisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPTesisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPTesisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jCBGrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPTesisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(tFDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPTesisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jCBModalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jBCancelar.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jBCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cancelar.png"))); // NOI18N
        jBCancelar.setText("Cancelar");
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jBGuardar.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jBGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/guardar.png"))); // NOI18N
        jBGuardar.setText("Guardar");
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel17.setText("Observaciones:");

        jTAObservaciones.setColumns(20);
        jTAObservaciones.setRows(5);
        jTAObservaciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTAObservacionesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTAObservaciones);

        jMRegistrados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bookPrestamo.png"))); // NOI18N
        jMRegistrados.setText("Registrados");
        jMRegistrados.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMRegistrados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMRegistradosMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMRegistrados);

        jMSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cerrarsecion.png"))); // NOI18N
        jMSalir.setText("Salir");
        jMSalir.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMSalirMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMSalir);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPLibro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPTesis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel17)
                                    .addComponent(jScrollPane1))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(panelCurves1, javax.swing.GroupLayout.PREFERRED_SIZE, 812, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelCurves1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPTesis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPLibro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMSalirMouseClicked
        this.setVisible(false);
        cn.desconectar();
    }//GEN-LAST:event_jMSalirMouseClicked

    private void tFVolumenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFVolumenKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tFVolumenKeyTyped

    private void tFTomoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFTomoKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tFTomoKeyTyped

    private void tFEdicionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFEdicionKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tFEdicionKeyTyped

    private void tFYearKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFYearKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tFYearKeyTyped

    private void tFEjemplaresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFEjemplaresKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tFEjemplaresKeyTyped

    private void tFTituloKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFTituloKeyReleased
        tFTitulo.setText(tFTitulo.getText().toUpperCase());
    }//GEN-LAST:event_tFTituloKeyReleased

    private void tFAutorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFAutorKeyReleased
        tFAutor.setText(tFAutor.getText().toUpperCase());
    }//GEN-LAST:event_tFAutorKeyReleased

    private void tFSignaturaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFSignaturaKeyReleased
        tFSignatura.setText(tFSignatura.getText().toUpperCase());
    }//GEN-LAST:event_tFSignaturaKeyReleased

    private void tFISBNKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFISBNKeyReleased
        tFISBN.setText(tFISBN.getText().toUpperCase());
    }//GEN-LAST:event_tFISBNKeyReleased

    private void tFDirectorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFDirectorKeyReleased
        tFDirector.setText(tFDirector.getText().toUpperCase());
    }//GEN-LAST:event_tFDirectorKeyReleased

    private void tFTituloKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFTituloKeyTyped
        char c = evt.getKeyChar();
        if (Character.isDigit(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tFTituloKeyTyped

    private void tFAutorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFAutorKeyTyped
        char c = evt.getKeyChar();
        if (Character.isDigit(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tFAutorKeyTyped

    private void tFDirectorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFDirectorKeyTyped
        char c = evt.getKeyChar();
        if (Character.isDigit(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tFDirectorKeyTyped

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        Limpiar();
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jCBTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBTipoActionPerformed
        if (jCBTipo.getSelectedItem().toString().equals("LIBRO")){
            HabilitaTesis(false);
            tFISBN.setText("");
            tFEdicion.setText("");
            tFEjemplares.setText("");
            jCBEditorial.setEnabled(true);
        }else{
            HabilitaTesis(true);
            jCBEditorial.setEnabled(false);
            tFEdicion.setText("1");
            tFEjemplares.setText("2");
            tFISBN.setText("N/A");
        }
    }//GEN-LAST:event_jCBTipoActionPerformed

    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        Registrar();
    }//GEN-LAST:event_jBGuardarActionPerformed

    private void jCBEditorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBEditorialActionPerformed
        if (jCBEditorial.getSelectedItem().toString().equals("OTROS...")) {
            String Editorial = JOptionPane.showInputDialog("Especifique la editorial: ");
            String sql = "INSERT INTO Editorial (NombreEditorial) VALUES(?)";
            try {
                PreparedStatement ps = cn.getConnection().prepareStatement(sql);
                ps.setString(1, Editorial.toUpperCase());//Guarda Nueva editorial
                ps.execute();
                ps.close();
            } catch (SQLException e) {
                System.out.println("Error al insertar nueva editorial " + e.getMessage());
            }
            jCBEditorial.removeAllItems();
            LlenarEditoriales();
        }
    }//GEN-LAST:event_jCBEditorialActionPerformed

    private void jTAObservacionesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTAObservacionesKeyReleased
        jTAObservaciones.setText(jTAObservaciones.getText().toUpperCase());
    }//GEN-LAST:event_jTAObservacionesKeyReleased

    private void jMRegistradosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMRegistradosMouseClicked
        try{
        LibRegistrados ventana = new LibRegistrados();
        ventana.setVisible(true);
        }catch(Exception e){System.out.println("Error al abrir Ventana Libros registrados: \n"+e.getMessage());}
    }//GEN-LAST:event_jMRegistradosMouseClicked

    /** Metodo para habilitar o deshabilitar cuadros de texto del panel de tesis*/
    private void HabilitaTesis(boolean estado){
        jCBGrado.setEnabled(estado);
        tFDirector.setEnabled(estado);
        jCBModalidad.setEnabled(estado);
        jPTesis.setEnabled(estado);
    }
    
    /** Limpia los campos de texto*/
    private void Limpiar(){
        tFTitulo.setText("");
        tFAutor.setText("");
        tFVolumen.setText("1");
        tFTomo.setText("1");
        tFEdicion.setText("");
        tFYear.setText("");
        tFSignatura.setText("N/A");
        tFISBN.setText("");
        tFEjemplares.setText("");
        tFDirector.setText("");
        jTAObservaciones.setText("");
        jCBCivil.setSelected(false);
        jCBComp.setSelected(false);
        jCBTopo.setSelected(false);
        jCBConst.setSelected(false);
    }
    
    /** Verifica los campos completos en los campos de libro*/
    private boolean CamposCompletos(){
        if(tFTitulo.getText().length() !=0 && tFAutor.getText().length() !=0 && tFVolumen.getText().length() !=0 && tFTomo.getText().length() !=0 && tFEdicion.getText().length() !=0 && tFYear.getText().length() !=0 && tFSignatura.getText().length() !=0 && tFISBN.getText().length() !=0 && tFEjemplares.getText().length() !=0){
            return true;
        }else{
            return false;
        }
    }
    
    /** Verifica que a menos un area tematica este seleccionada*/
    private boolean AreaSeleccionada(){
        if (jCBCivil.isSelected() || jCBComp.isSelected() || jCBTopo.isSelected() || jCBConst.isSelected()){
            return true;
        }else{
            JOptionPane.showMessageDialog(this, "Debe seleccionar a menos un área","Error al procesar",JOptionPane.ERROR_MESSAGE);
            return false;
            }
    }
    
    /**
     * Hace el registro del libro, primero verifica de que tipo es: Libro o Tesis
     * a continuación verifica que todos los campos esten completos y que a menos un
     * area este seleccionada.
     */
    private void Registrar(){
        if(jCBTipo.getSelectedItem().toString().equals("LIBRO")){
        if(CamposCompletos() && AreaSeleccionada() && !ExisteLibro(tFTitulo.getText(), tFAutor.getText())){
            String sql = "INSERT INTO Libro(Tipo,Titulo,Autor,Volumen,Tomo,Edicion,Año,Area,SigTopografica,IdEditorial,ISBN,Stock,Observaciones) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";
            try {
                PreparedStatement ps = cn.getConnection().prepareStatement(sql);
                ps.setString(1, jCBTipo.getSelectedItem().toString());
                ps.setString(2, tFTitulo.getText());
                ps.setString(3, tFAutor.getText());
                ps.setInt(4, Integer.parseInt(tFVolumen.getText()));
                ps.setInt(5, Integer.parseInt(tFTomo.getText()));
                ps.setInt(6, Integer.parseInt(tFEdicion.getText()));
                ps.setString(7, tFYear.getText());
                ps.setString(8, Areas());
                ps.setString(9, tFSignatura.getText());
                ps.setInt(10, DevuelveIDEditorial());
                ps.setString(11, tFISBN.getText());
                ps.setInt(12, Integer.parseInt(tFEjemplares.getText()));
                ps.setString(13, jTAObservaciones.getText());

                ps.execute();
                ps.close();
                Limpiar();
                ImprimeEtiquetas(NuevoLibro());
            }catch(SQLException ex){System.out.println("Error al guardar libro"+ex.getMessage()); }

        }else{//Los campos necesarios para libro no estan completos
            JOptionPane.showMessageDialog(this,"Debe completar los datos del libro","Error al procesar",JOptionPane.ERROR_MESSAGE);
        }
        
    }else{//Si no es Libro, entonces es tesis
            if(CamposCompletos() && AreaSeleccionada() && tFDirector.getText().length() !=0 && !ExisteLibro(tFTitulo.getText(), tFAutor.getText())){
                String sql = "INSERT INTO Libro(Tipo,Titulo,Autor,Volumen,Tomo,Edicion,Año,Area,SigTopografica,IdEditorial,ISBN,Stock,Observaciones) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";
            try {
                PreparedStatement ps = cn.getConnection().prepareStatement(sql);
               ps.setString(1, jCBTipo.getSelectedItem().toString());
                ps.setString(2, tFTitulo.getText());
                ps.setString(3, tFAutor.getText());
                ps.setInt(4, Integer.parseInt(tFVolumen.getText()));
                ps.setInt(5, Integer.parseInt(tFTomo.getText()));
                ps.setInt(6, Integer.parseInt(tFEdicion.getText()));
                ps.setString(7, tFYear.getText());
                ps.setString(8, Areas());
                ps.setString(9, tFSignatura.getText());
                ps.setInt(10, 4);
                ps.setString(11, tFISBN.getText());
                ps.setInt(12, Integer.parseInt(tFEjemplares.getText()));
                ps.setString(13, jTAObservaciones.getText());

                ps.execute();
                ps.close();
                Limpiar();
                ImprimeEtiquetas(NuevoLibro());
            }catch(SQLException ex){System.out.println("Error al guardar tesis "+ex.getMessage()); }
            
            //INSERTAR EN TABLA DETALLE DE LIBRO
            sql = "INSERT INTO DetalleLibro(IdLibro, Grado, Director, Modalidad) VALUES(?,?,?,?)";
            try {
                PreparedStatement ps = cn.getConnection().prepareStatement(sql);
                ps.setInt(1, NuevoLibro());
                ps.setString(2, jCBGrado.getSelectedItem().toString());
                ps.setString(3, tFDirector.getText());
                ps.setString(4, jCBModalidad.getSelectedItem().toString());
                
                ps.execute();
                ps.close();
                Limpiar();
            }catch(SQLException e){System.out.println("Error al guardar detalle de libro(Tesis) "+e.getMessage());}
            }else{//Los campos necesarios para tesis no estan completos
                JOptionPane.showMessageDialog(this,"Error al procesar","Debe completar los datos de la tesis",JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    /** 
     * Consulta las editoriales y rellena el jComboBox correspondiente
     */
    private void LlenarEditoriales(){
        String sql = "SELECT IdEditorial,NombreEditorial FROM Editorial ORDER BY NombreEditorial";
        try{
            Statement st = cn.getConnection().createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                jCBEditorial.addItem(rs.getInt(1)+". "+rs.getString(2));
            }
            jCBEditorial.addItem("OTROS...");
            rs.close();
            st.close();
            //cn.desconectar();
        }catch(Exception e){
            System.out.println("Error al llenar editoriales "+e.getMessage());
            
        }
    }
    
    /** 
     * Recorrido para detectar el ID de la editorial
     * @return idEditorial Regresa el número encontrada hasta '.'
     */
    private int DevuelveIDEditorial(){
        String AuxiliarId="";
        int idEditorial=0;
        for (int i = 0; i < jCBEditorial.getSelectedItem().toString().length(); i++) {
            char c = jCBEditorial.getSelectedItem().toString().charAt(i);
            if (c != '.') {
                AuxiliarId = AuxiliarId + c;
            } else {
                break;
            }
        }
        idEditorial = Integer.parseInt(AuxiliarId);
        return idEditorial;
    }
    
    /** 
     * Captura las areas seleccionadas
     * @return Areas, concatena en un String las areas seleccionadas
     */
    private String Areas(){
        String Areas="";
        if(jCBCivil.isSelected()){
            Areas = "1";
        }if(jCBComp.isSelected()){
            Areas = Areas +"2";
        }if(jCBTopo.isSelected()){
            Areas = Areas +"3";
        }if(jCBConst.isSelected()){
            Areas = Areas +"4";
        }
        return Areas;
    }
    /** 
     * Regresa el id de libro más reciente agregado
     * @return NuevoLibro Regresa el id del último libro agregado
     */
    private int NuevoLibro(){
        int idLibro=0;
        String sql = "SELECT MAX(idLibro) FROM Libro";
        try{
            Statement st = cn.getConnection().createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                idLibro = rs.getInt(1);
            }
            rs.close();
            st.close();
        }catch(SQLException e){
            System.out.println("Error al obtener el idLibro mas reciente "+e.getMessage());
            
        }
        return idLibro;
    }
    
    /**
     * Reimprime las etiquetas del libro con el id especificdo
     * @param ID Recibe el id del libro seleccionado
     */
    @SuppressWarnings("unchecked")
    private void ImprimeEtiquetas(int ID) {
        try {
            String ruta = "src/Reportes/LibrosporID.jasper";
            Map parametros = new HashMap();
            parametros.put("idLibro", ID);

            JasperReport jr = (JasperReport) JRLoader.loadObjectFromFile(ruta);
            JasperPrint jp = JasperFillManager.fillReport(jr, parametros, cn.getConnection());
            JasperViewer jv = new JasperViewer(jp, false);
            jv.setVisible(true);
            jv.setTitle("Reimpresión de etiquetas. IdLibro ="+ID);
        } catch (Exception ex) {
            System.out.println("Error al generar etiquetas: "+ex.getMessage());
        }
    }
    /**
     * Verifica si existe un libro con el nombre y autor señalado
     * @return true: existe libro con el mismo nombre y autor
     * @return false: no existe libro
     * @param Titulo recibe el titulo del libro que se desea verificar
     * @param Autor recibe el autor del libro que se desea verificar
     */
    private boolean ExisteLibro(String Titulo, String Autor){
         String sql = "SELECT idLibro, Titulo, Autor, Stock FROM Libro WHERE Titulo='"+Titulo+"' && Autor='"+Autor+"';";
         boolean Existe=false;
         int idLibro=0, Stock=0;
         String TituloRec="" ,AutorRec="";
        try{
            Statement st = cn.getConnection().createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                idLibro=rs.getInt(1);
                TituloRec=rs.getString(2);
                AutorRec=rs.getString(3);
                Stock=rs.getInt(4);                
                Existe=true;
            }
            rs.close();
            st.close();
        }catch(SQLException e){
            System.out.println("Error al obtener el idLibro mas reciente "+e.getMessage());
        }
        if(Existe){
            JOptionPane.showMessageDialog(this, "El libro que intenta ingresar ya se encuentra registrado"
                        + "\nBarcode: "+idLibro+"\nTitulo: "+TituloRec+"\nAutor: "+AutorRec+"\nEjemplares: "+Stock+"","Error al procesar",JOptionPane.ERROR_MESSAGE);
        }else{return false;}
        return Existe;
    }
               
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Libros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Libros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Libros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Libros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Libros().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Libros.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBGuardar;
    private javax.swing.JCheckBox jCBCivil;
    private javax.swing.JCheckBox jCBComp;
    private javax.swing.JCheckBox jCBConst;
    private javax.swing.JComboBox<String> jCBEditorial;
    private javax.swing.JComboBox<String> jCBGrado;
    private javax.swing.JComboBox<String> jCBModalidad;
    private javax.swing.JComboBox<String> jCBTipo;
    private javax.swing.JCheckBox jCBTopo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMRegistrados;
    private javax.swing.JMenu jMSalir;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPLibro;
    private javax.swing.JPanel jPTesis;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTAObservaciones;
    private org.edisoncor.gui.panel.PanelCurves panelCurves1;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFAutor;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFDirector;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFEdicion;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFEjemplares;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFISBN;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFSignatura;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFTitulo;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFTomo;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFVolumen;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFYear;
    // End of variables declaration//GEN-END:variables
}
