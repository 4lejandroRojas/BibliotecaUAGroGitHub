package uai_biblioteca;

import java.awt.Image;
import java.awt.Toolkit;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 * Necesaria para hacer prestamos de libros
 * @author @4lejandroRojas
 * @version 3
 * @see ConectorCorreos Necesario para enviar por E-mail el reporte de préstamo
 */
public class Prestamos extends javax.swing.JFrame {

    int idPersonas=0; //Almacena Id persona
    String Usuario = "", Turno = "",FechaD="",FechaS="",PE="";
    boolean ExisteDetalle =false; //Flag si existe detalle para Insert o Update
    Conexion cn;
    DefaultTableModel Modelo = new DefaultTableModel();

/**
 * Inicializa los componentes necesarios para que funcione la clase
 * @throws Exception Atrapa las excepciones producidas por culquier error al desencriptar los datos de configuracion de la BD.
 */
    public Prestamos() throws Exception {

        initComponents();
        cn = new Conexion();
        tFMatricula.requestFocus();
        setLocationRelativeTo(null);
        setResizable(false);
        
        Calendar c = new GregorianCalendar();        
        FechaS = Integer.toString(c.get(Calendar.DATE))+"/"+ Integer.toString(c.get(Calendar.MONTH)+1)+"/"+Integer.toString(c.get(Calendar.YEAR));
        jLFechaS.setText(FechaS);
        
        Modelo.addColumn("Barcode");
        Modelo.addColumn("Titulo");
        Modelo.addColumn("Autor");
        Modelo.addColumn("SigTopografica");
        Modelo.addColumn("Editorial");
        Modelo.addColumn("Stock");
        jTable1.setModel(Modelo);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(60);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(10);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(30);

    }

    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("img/libros.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonNice1 = new org.edisoncor.gui.button.ButtonNice();
        jLabel1 = new javax.swing.JLabel();
        jBPrestar = new javax.swing.JButton();
        jBCancelar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tFMatricula = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jBbuscamatricula = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        tFNombre = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel4 = new javax.swing.JLabel();
        tFTelefono = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel5 = new javax.swing.JLabel();
        tFSemestre = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel6 = new javax.swing.JLabel();
        tFGrupo = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel7 = new javax.swing.JLabel();
        jCTurno = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTDireccion = new javax.swing.JTextArea();
        Status = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        Status1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tFBarcode = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jDCDevolucion = new com.toedter.calendar.JDateChooser();
        jLabel12 = new javax.swing.JLabel();
        jLFechaS = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMSalir = new javax.swing.JMenu();

        buttonNice1.setText("buttonNice1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Préstamo de Libros");
        setIconImage(getIconImage());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logos/Prestamo de Libros.png"))); // NOI18N

        jBPrestar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jBPrestar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/guardar.png"))); // NOI18N
        jBPrestar.setText("Prestar");
        jBPrestar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPrestarActionPerformed(evt);
            }
        });

        jBCancelar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jBCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cancelar.png"))); // NOI18N
        jBCancelar.setText("Cancelar");
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Datos del alumno", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Narrow", 1, 16))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Arial Narrow", 1, 16)); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Matricula:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 27, -1, 20));

        tFMatricula.setDescripcion("Matricula/N° empleado");
        tFMatricula.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tFMatricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tFMatriculaActionPerformed(evt);
            }
        });
        tFMatricula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tFMatriculaKeyTyped(evt);
            }
        });
        jPanel1.add(tFMatricula, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 170, 30));

        jBbuscamatricula.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buscar.png"))); // NOI18N
        jBbuscamatricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBbuscamatriculaActionPerformed(evt);
            }
        });
        jPanel1.add(jBbuscamatricula, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 40, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Nombre:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        tFNombre.setEditable(false);
        tFNombre.setDescripcion("Nombre (s) apellidos");
        tFNombre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jPanel1.add(tFNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 300, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Telefono:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        tFTelefono.setDescripcion("747xxxxxxx");
        tFTelefono.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tFTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tFTelefonoKeyTyped(evt);
            }
        });
        jPanel1.add(tFTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, 170, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Semestre:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        tFSemestre.setDescripcion("1°, 2°, 3°,4°, etc.");
        tFSemestre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tFSemestre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tFSemestreKeyTyped(evt);
            }
        });
        jPanel1.add(tFSemestre, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, 170, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Grupo:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        tFGrupo.setDescripcion("101, 102, 103, 104, etc.");
        tFGrupo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jPanel1.add(tFGrupo, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 170, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Turno:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        jCTurno.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jCTurno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Matutino", "Vespertino" }));
        jPanel1.add(jCTurno, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 180, 170, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("Adeudo:");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, -1));

        jTDireccion.setColumns(20);
        jTDireccion.setRows(5);
        jScrollPane1.setViewportView(jTDireccion);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 210, 300, -1));

        Status.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel1.add(Status, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 310, 40, 20));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("Direccion:");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        Status1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        Status1.setText("Libro (s)");
        jPanel1.add(Status1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 310, 70, 20));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Libro (s)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Narrow", 1, 16))); // NOI18N
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Salida:");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Codigo de Barras:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        tFBarcode.setDescripcion("Barcode");
        tFBarcode.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tFBarcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tFBarcodeActionPerformed(evt);
            }
        });
        tFBarcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tFBarcodeKeyTyped(evt);
            }
        });
        jPanel2.add(tFBarcode, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 230, -1));

        jDCDevolucion.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jPanel2.add(jDCDevolucion, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 50, 130, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Devolución:");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, -1, -1));

        jLFechaS.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPanel2.add(jLFechaS, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 90, 20));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jMSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cerrarsecion.png"))); // NOI18N
        jMSalir.setText("Salir");
        jMSalir.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMSalirMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMSalir);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 821, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBPrestar)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBPrestar)
                            .addComponent(jBCancelar))
                        .addContainerGap())
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        Limpiar();
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jBbuscamatriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBbuscamatriculaActionPerformed
        VerificaMatricula();
    }//GEN-LAST:event_jBbuscamatriculaActionPerformed

    private void jBPrestarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPrestarActionPerformed
        if(CamposCompletos()){
            ActualizaDireccion();
            DatosDetallePersona();
            
            //Conversion a de fechas a String
            FechaD = jDCDevolucion.getCalendar().get(Calendar.DATE) + "/" + (jDCDevolucion.getCalendar().get(Calendar.MONTH) + 1) + "/" + jDCDevolucion.getCalendar().get(Calendar.YEAR);
            
            for(int i=0;i<jTable1.getRowCount();i++){
                Registrar(Integer.parseInt((String)jTable1.getValueAt(i, 0)));
        }
            ReportePrestamo();
            EmailReporte();
            Limpiar();
        }else{
            JOptionPane.showMessageDialog(this, "Debe ingresar los datos completos para continuar","Error al procesar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jBPrestarActionPerformed

    private void tFMatriculaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFMatriculaKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tFMatriculaKeyTyped

    private void tFTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFTelefonoKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tFTelefonoKeyTyped

    private void tFSemestreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFSemestreKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tFSemestreKeyTyped

    private void tFMatriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tFMatriculaActionPerformed
        VerificaMatricula();
    }//GEN-LAST:event_tFMatriculaActionPerformed

    private void jMSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMSalirMouseClicked
        this.setVisible(false);
        Principal obj = new Principal();
        obj.setVisible(true);
        cn.desconectar();
    }//GEN-LAST:event_jMSalirMouseClicked

    private void tFBarcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tFBarcodeActionPerformed
        if(tFBarcode.getText().length() !=0){
        BuscarLibro(tFBarcode.getText());
        }else{JOptionPane.showMessageDialog(this,"Debe ingresar un código de barras válido", "Error al procesar",JOptionPane.ERROR_MESSAGE);}
    }//GEN-LAST:event_tFBarcodeActionPerformed

    private void tFBarcodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFBarcodeKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tFBarcodeKeyTyped

    /** 
     * Hace la consulta buscando la matricula o numero de empleado */
    private void VerificaMatricula() {
        boolean ExisteMatricula = false;
        
        String sqlMatricula = "SELECT idPersonas, Carrera, Nombres, Apellidos, Direccion, Usuario FROM Personas WHERE Matricula='" + tFMatricula.getText() + "';";
        try {
            Statement st = cn.getConnection().createStatement();
            ResultSet rs = st.executeQuery(sqlMatricula);

            while (rs.next()) {
                idPersonas = rs.getInt("idPersonas");
                PE = rs.getString("Carrera").toUpperCase();
                tFNombre.setText(rs.getString("Nombres") + " " + rs.getString("Apellidos"));
                jTDireccion.setText(rs.getString("Direccion"));
                Usuario = rs.getString("Usuario");
                ExisteMatricula = true;
            }
            tFBarcode.requestFocus();

        } catch (SQLException ex) {
            System.out.println("Error al consultar por matricula: " + ex.getMessage());
        }
        if (ExisteMatricula) {
            String sqlDetalle = "SELECT Telefono,Semestre,Grupo,Turno FROM DetallePersona WHERE idPersonas='" + idPersonas + "';";
            ExisteDetalle=false;
            try {
                Statement st = cn.getConnection().createStatement();
                ResultSet rs = st.executeQuery(sqlDetalle);

                while (rs.next()) {
                    tFTelefono.setText(rs.getString("Telefono"));
                    tFSemestre.setText(rs.getString("Semestre"));
                    tFGrupo.setText(rs.getString("Grupo"));
                    Turno = rs.getString("Turno");
                    ExisteDetalle=true;
                }
            } catch (SQLException ex) {
                System.out.println("Error al leer Detalle: " + ex.getMessage());
            }
            /* Verifica el turno  y tipo de usuario de la persona para asi poder colocarlo en la interfaz gráfica*/
            if (Turno.equals("Matutino")) {
                jCTurno.setSelectedIndex(0);
            } else {
                jCTurno.setSelectedIndex(1);
            }
            if (Usuario.equals("Maestro")) {
                tFSemestre.setText("N/A");
                tFGrupo.setText("N/A");
            }

            String sql = "SELECT count(estado) FROM Prestamos WHERE idUsuario = " + idPersonas + " && estado='Prestado';";
            try {
                Statement st = cn.getConnection().createStatement();
                ResultSet rs = st.executeQuery(sql);

                while (rs.next()) {
                    Status.setText(String.valueOf(rs.getInt(1)));
                }
            } catch (Exception ex) {
                System.out.println("Error al contar libros prestados: "+ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Matricula o número de empleado no encontrado. Favor de registrarlo.", "No encontrado", JOptionPane.WARNING_MESSAGE);
            Limpiar();
            tFMatricula.requestFocus();
        }
        
    }

    /**
     * Envia el formato generado por @ReportePrestamo, para ello hace uso e la clase ConectorCorreos y sobreescribe los parametros definidos.
     */ 
    private void EmailReporte() {
        ConectorCorreos call = new ConectorCorreos();
        call.mail("Se ha(n) prestado "+jTable1.getRowCount()+"  libro(s) a:\n" + tFNombre.getText() + "\nMatricula: " + tFMatricula.getText(), "Libro(s) Prestado");
    }

    /**
     * Limpia los campos de texto ingresados, el jdatachooser de FechadeSalida, así como elimina los elementos de la tabla
     */ 
    private void Limpiar() {
        tFMatricula.setText("");
        tFNombre.setText("");
        tFTelefono.setText("");
        tFSemestre.setText("");
        jTDireccion.setText("");
        tFGrupo.setText("");
        Status.setText("");
        //------------------------
        tFBarcode.setText("");
        jDCDevolucion.setCalendar(null);
        LimpiaTabla();
    }
    
    /** 
     * Recorre los elementos de la JTable y elimina todos los elementos ingresados
     */
    private void LimpiaTabla(){
         for (int i = 0; i < jTable1.getRowCount(); i++) {
           Modelo.removeRow(i);
           i-=1;
    }
    }

    /**
     * Registra el o los libros con el barcode que recibe.
     * @param idLibro recibe el barcode para ingresarlo
     */
    
    private void Registrar(int idLibro) {/** Registra el prestamo del (los) libro (s) */
            String sql = "INSERT INTO Prestamos(idUsuario,FechaS,FechaD,estado,idAdm,idLibro) VALUES(?,?,?,?,?,?)";
            try {
                PreparedStatement ps = cn.getConnection().prepareStatement(sql);
                ps.setInt(1, idPersonas);
                ps.setString(2, FechaS);
                ps.setString(3, FechaD);
                ps.setString(4, "Prestado");
                ps.setInt(5, loginAdm.idResponsable);
                ps.setInt(6, idLibro);

                ps.execute();
                ps.close();
                ActualizaStock(String.valueOf(idLibro));
            } catch (Exception e) {
                System.out.println("Error al registrar libro: "+e.getMessage());
            }
    }
    
    /** 
     * Visualiza hoja de reporte del prestamo de libro así como genera el pdf del prestamo para posterior envio
     * 
     */
    @SuppressWarnings("unchecked")
    private void ReportePrestamo() {
        try {
            String ruta = "src/reportes/Prestamo.jasper";
            Map parametros = new HashMap();
            parametros.put("idPersonas", this.idPersonas);
            parametros.put("FechaS", this.FechaS);

            JasperReport jr = (JasperReport) JRLoader.loadObjectFromFile(ruta);
            JasperPrint jp = JasperFillManager.fillReport(jr, parametros, cn.getConnection());
            JasperViewer jv = new JasperViewer(jp, false);
            jv.setVisible(true);
            jv.setTitle("Reporte de Prestamo");
            JasperExportManager.exportReportToPdfFile(jp, "C:/img/Prestamo.pdf");
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }


    /**
     * Vertifica que los campos esten completos
     * @return true indica que todos los campo necesarios se encuentran completos
     */
    private boolean CamposCompletos() {
        if (tFMatricula.getText().length() > 0 && tFTelefono.getText().length() > 0 && tFSemestre.getText().length() > 0 && tFGrupo.getText().length() > 0 && jDCDevolucion.getDate() !=null && Modelo.getRowCount()!=0) {
            return true;
        } else {
            return false;
        }
    }

   

    /**
     * Actualiza Detalle de persona o inserta en caso de no existir, para ellos hace uso de 
     * una variable bandera "ExisteDetalle" que se usó en la comprobación de la matricula
     * */
    private void DatosDetallePersona() {
        if(ExisteDetalle){//Si existe detalle, entonces Update
        String sql = "UPDATE DetallePersona SET Telefono =?,Semestre=?,Grupo=?,Turno=? WHERE idPersonas='" + this.idPersonas + "';";
        
        try {
            PreparedStatement pst = cn.getConnection().prepareStatement(sql);
            pst.setString(1, this.tFTelefono.getText());
            pst.setString(2, this.tFSemestre.getText());
            pst.setString(3, this.tFGrupo.getText());
            pst.setString(4, this.jCTurno.getSelectedItem().toString());
            pst.executeUpdate();
            pst.close();

        } catch (SQLException ex) {
            System.out.println("Error al actualizar DetallePersona:" + ex.getMessage());
        }
        }else{//Sino existe detalle entonces Insert
            String sql="INSERT INTO DetallePersona(idPersonas,Telefono, Semestre, Grupo, Turno) VALUES(?,?,?,?,?)";
           
            try{
            PreparedStatement pst = cn.getConnection().prepareStatement(sql);
            pst.setInt(1, this.idPersonas);
            pst.setString(2, this.tFTelefono.getText());
            pst.setString(3, this.tFSemestre.getText());
            pst.setString(4, this.tFGrupo.getText());
            pst.setString(5, this.jCTurno.getSelectedItem().toString());
            pst.execute();
            pst.close();
            }catch(SQLException e){System.out.println("Error al insertar DetallePersona: "+e.getMessage());}
            
        }
    }
    
    /** 
     * Actualiza la dirección de la persona
     * 
     */
    private void ActualizaDireccion(){
        String sql = "UPDATE Personas SET Direccion=? WHERE idPersonas='" + this.idPersonas + "';";
        
        try {
            PreparedStatement pst = cn.getConnection().prepareStatement(sql);
            pst.setString(1, this.jTDireccion.getText());
            pst.executeUpdate();
            pst.close();

        } catch (SQLException ex) {
            System.out.println("Error al actualizar la direccion de Persona:" + ex.getMessage());
        }
    }
    
    /**
     * Busca el libro dado su barcode y lo agrega a la jTable
     * @param barcode recibe el código de barras que buscará para proporcionar los datos del libro
     */
    private void BuscarLibro(String barcode){
        String sql = "SELECT idLibro,Titulo,Autor, SigTopografica, idEditorial,Stock FROM Libro WHERE idLibro='"+barcode+"';";
        boolean ExisteLibro=false;
        String datos[]  = new String[6];
        
        try {
            Statement st = cn.getConnection().createStatement();
            ResultSet rs = st.executeQuery(sql);
            
            while (rs.next()) {
                datos[0]= String.valueOf(rs.getInt(1));
                datos[1]=rs.getString(2);
                datos[2]=rs.getString(3);
                datos[3]=rs.getString(4);
                datos[4]=BuscaEditorial(rs.getInt(5));
                datos[5]=String.valueOf(rs.getString(6));
                Modelo.addRow(datos);
                jTable1.setModel(Modelo);
                ExisteLibro=true;
            }
            
            //Comprueba que haya ingresado a menos un libro
            if(!ExisteLibro ){
                JOptionPane.showMessageDialog(this, "No existe libro con el código de barras o clave ingresado","Error al procesar",JOptionPane.WARNING_MESSAGE);
            }
            
        } catch (SQLException ex) {
            System.out.println("Error al buscar libro: "+ex.getMessage());
        }
        tFBarcode.setText("");
        tFBarcode.requestFocusInWindow();
    }
    
    /** 
     * Busca el nombre de la editorial, dado su id
     * @return Regresa el nombre de la editorial
     * @param idEditorial Recibe el número/ID de la editorial
     */
    
    private String BuscaEditorial(int idEditorial){
        String sql = "SELECT NombreEditorial FROM Editorial WHERE idEditorial='"+idEditorial+"';";
        try {
            Statement st = cn.getConnection().createStatement();
            ResultSet rs = st.executeQuery(sql);
            
            while (rs.next()) {
                return rs.getString(1);
            }
        }catch(SQLException e){System.out.println("Error al buscar editorial: "+e.getMessage());}
        return "";
    }
    
    /**
     * Actualiza el Stock de libros, le resta 1 al libro cuyo barcode reciba
     * @param idLibro Recibe el barcode del libro
     */
    public void ActualizaStock(String idLibro){
        String sqlSelect = "SELECT Stock FROM Libro WHERE idLibro='"+idLibro+"';";
        int Stock=0;
        try {
            Statement st = cn.getConnection().createStatement();
            ResultSet rs = st.executeQuery(sqlSelect);
            
            while (rs.next()) {
                Stock = rs.getInt(1);
            }            
            Stock =Stock - 1;
            
        }catch(SQLException e){System.out.println("Error al leer el Stock del libro: "+e.getMessage());}
        
        String sqlUpd="UPDATE Libro SET Stock=? WHERE idLibro='"+idLibro+"';";
        
        try {
            PreparedStatement pst = cn.getConnection().prepareStatement(sqlUpd);
            pst.setInt(1, Stock);
            pst.executeUpdate();
            pst.close();

        } catch (SQLException ex) {
            System.out.println("Error al actualizar el Stock:" + ex.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Prestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Prestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Prestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Prestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Prestamos().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Prestamos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Status;
    private javax.swing.JLabel Status1;
    private org.edisoncor.gui.button.ButtonNice buttonNice1;
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBPrestar;
    private javax.swing.JButton jBbuscamatricula;
    private javax.swing.JComboBox<String> jCTurno;
    private com.toedter.calendar.JDateChooser jDCDevolucion;
    private javax.swing.JLabel jLFechaS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMSalir;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTDireccion;
    private javax.swing.JTable jTable1;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFBarcode;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFGrupo;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFMatricula;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFNombre;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFSemestre;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFTelefono;
    // End of variables declaration//GEN-END:variables
}
