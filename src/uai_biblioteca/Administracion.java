package uai_biblioteca;

import java.awt.Image;
import java.awt.Toolkit;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

public class Administracion extends javax.swing.JFrame  {

    Conexion cn;
    Icon Select, upd;
    String matricula, idPersona;
    //Auxiliar al contar totales
    int AuxTotal=0; //Meses
    int AuxProf=0, AuxAlumno=0, AuxOtros=0;
    int AuxLibros=0,AuxTesis=0,AuxPP=0,AuxCD=0,AuxMaterial=0;
    int AuxPrestamo=0,AuxInternet=0,AuxCNA=0,AuxServicios=0;

    public Administracion() throws Exception {
        this.cn = new Conexion();
        initComponents();
        mostrar("");
        Select = new ImageIcon(getClass().getResource("/img/selectFila.png"));
        upd = new ImageIcon(getClass().getResource("/img/update.png"));
        setLocationRelativeTo(null);
        setResizable(false);
    }

    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("img/libros.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tFNombres = new org.edisoncor.gui.textField.TextFieldRectBackground();
        tFApellidos = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel4 = new javax.swing.JLabel();
        tFCarrera = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel3 = new javax.swing.JLabel();
        tFMatricula = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tFDireccion = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        tFBMatricula = new org.edisoncor.gui.textField.TextFieldRectBackground();
        jPanel3 = new javax.swing.JPanel();
        meses = new com.toedter.calendar.JMonthChooser();
        a침os = new com.toedter.calendar.JYearChooser();
        jButton2 = new javax.swing.JButton();
        jBReAnual = new javax.swing.JButton();
        jBReMensual = new javax.swing.JButton();
        jTFDia = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMDeudores = new javax.swing.JMenu();
        jMSugerencias = new javax.swing.JMenu();
        jMVisualizador = new javax.swing.JMenu();
        jMVisualizador1 = new javax.swing.JMenu();
        jMSalir = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Administraci칩n General");
        setIconImage(getIconImage());

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Detalle del Usuario", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Nombres");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 110, -1));

        tFNombres.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tFNombres.setDescripcion("Nombres");
        tFNombres.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jPanel1.add(tFNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, 40, 290, -1));

        tFApellidos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tFApellidos.setDescripcion("Apellidos");
        tFApellidos.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jPanel1.add(tFApellidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, 90, 290, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Apellidos");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, 90, -1));

        tFCarrera.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tFCarrera.setDescripcion("Carrera");
        tFCarrera.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jPanel1.add(tFCarrera, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 88, 140, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Carrera");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 70, -1));

        tFMatricula.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tFMatricula.setDescripcion("Matricula");
        tFMatricula.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        tFMatricula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tFMatriculaKeyTyped(evt);
            }
        });
        jPanel1.add(tFMatricula, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 42, 140, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Matricula");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 80, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Direcci칩n");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, -1, -1));

        tFDireccion.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tFDireccion.setDescripcion("Direcci칩n");
        tFDireccion.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jPanel1.add(tFDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 136, 580, -1));

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/actualizar.png"))); // NOI18N
        jButton3.setText("Corregir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 30, 130, -1));

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cancelar.png"))); // NOI18N
        jButton4.setText("Limpiar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 80, 130, 40));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Busqueda de Usuario", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/asistencias.png"))); // NOI18N
        jButton6.setText("Asistencias");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 210, 30));

        tFBMatricula.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tFBMatricula.setDescripcion("Ingrese Matricula");
        tFBMatricula.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tFBMatricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tFBMatriculaActionPerformed(evt);
            }
        });
        tFBMatricula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tFBMatriculaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tFBMatriculaKeyTyped(evt);
            }
        });
        jPanel2.add(tFBMatricula, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 210, 30));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Reportes de Asistencia/ Estad칤sticos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        meses.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel3.add(meses, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, -1, 33));
        jPanel3.add(a침os, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, -1, 33));

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/asistencias.png"))); // NOI18N
        jButton2.setText("Diario");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 140, 70));

        jBReAnual.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jBReAnual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/asistencias.png"))); // NOI18N
        jBReAnual.setText("Anual");
        jBReAnual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBReAnualActionPerformed(evt);
            }
        });
        jPanel3.add(jBReAnual, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, 160, 33));

        jBReMensual.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jBReMensual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/asistencias.png"))); // NOI18N
        jBReMensual.setText("Mensual");
        jBReMensual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBReMensualActionPerformed(evt);
            }
        });
        jPanel3.add(jBReMensual, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, 160, 33));

        jTFDia.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTFDia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFDiaKeyTyped(evt);
            }
        });
        jPanel3.add(jTFDia, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 50, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logos/Administraci칩n.png"))); // NOI18N

        jMDeudores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/nuevoAdm.png"))); // NOI18N
        jMDeudores.setText("Deudores");
        jMDeudores.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMDeudores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMDeudoresMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMDeudores);

        jMSugerencias.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/contenido.png"))); // NOI18N
        jMSugerencias.setText("Sugerencias");
        jMSugerencias.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMSugerencias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMSugerenciasMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMSugerencias);

        jMVisualizador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/registro.png"))); // NOI18N
        jMVisualizador.setText("Formato Adquisiciones");
        jMVisualizador.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMVisualizador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMVisualizadorMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMVisualizador);

        jMVisualizador1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bookPrestamo.png"))); // NOI18N
        jMVisualizador1.setText("Libros");
        jMVisualizador1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMVisualizador1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMVisualizador1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMVisualizador1);

        jMSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cerrarsecion.png"))); // NOI18N
        jMSalir.setText("Salir");
        jMSalir.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMSalirMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMSalir);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(21, 21, 21)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        int fila = jTable1.getSelectedRow();
        if (fila >= 0) {
            this.matricula = jTable1.getValueAt(fila, 0).toString();
            this.tFMatricula.setText(matricula);
            this.tFCarrera.setText(jTable1.getValueAt(fila, 1).toString());
            this.tFNombres.setText(jTable1.getValueAt(fila, 2).toString());
            this.tFApellidos.setText(jTable1.getValueAt(fila, 3).toString());
            this.tFDireccion.setText(jTable1.getValueAt(fila, 4).toString());
            idPersona();
        }
    }//GEN-LAST:event_jTable1MousePressed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.tFMatricula.setText(null);
        this.tFCarrera.setText(null);
        this.tFNombres.setText(null);
        this.tFBMatricula.setText(null);
        this.tFDireccion.setText(null);
        this.tFApellidos.setText(null);
    }//GEN-LAST:event_jButton4ActionPerformed
    public void idPersona() {
        String sql = "Select idpersonas from personas where matricula = " + matricula + ";";
        try {
            Statement st = cn.getConnection().createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                this.idPersona = rs.getString(1);
            }
            //cn.desconectar();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (this.jTFDia.getText().length() != 0) {
            String fecha = (this.jTFDia.getText() + "/") + (this.meses.getMonth() + 1 + "/") + this.a침os.getYear();
            System.out.println(fecha);
            ReporteDiario(fecha);
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un d칤a valido", "Error al procesar",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (tFMatricula.getText().length() != 0 && tFNombres.getText().length() != 0 && tFApellidos.getText().length() != 0 && tFCarrera.getText().length() != 0 && tFDireccion.getText().length() != 0) {
            try {
                PreparedStatement pst = cn.getConnection().prepareStatement("UPDATE personas "
                        + "SET matricula=?, carrera=?, nombres=?, apellidos=?, direccion=? WHERE idpersonas=" + this.idPersona + ";");
                pst.setString(1, this.tFMatricula.getText());//matricula
                pst.setString(2, this.tFCarrera.getText());//carrera
                pst.setString(3, this.tFNombres.getText());//nombres
                pst.setString(4, this.tFApellidos.getText());//apellidos
                pst.setString(5, this.tFDireccion.getText());//direccion
                pst.executeUpdate();
                pst.close();
                //cn.desconectar();

                JOptionPane.showMessageDialog(this, "Se Actualizo con exito", "Actualizado", JOptionPane.WARNING_MESSAGE, this.upd);
                mostrar("");
                Limpiar();
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(this, "Error al Actualizar");
            } catch (Exception ex) {
                Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe completar los campos.\nNo puede dejar datos vac칤os", "Error al procesar",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMSalirMouseClicked
        this.setVisible(false);
        Principal obj = new Principal();
        obj.setVisible(true);
        cn.desconectar();
    }//GEN-LAST:event_jMSalirMouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        ReporteMatricula(tFBMatricula.getText());
    }//GEN-LAST:event_jButton6ActionPerformed
    /**
     * Imprime reporte mensual
     */
    @SuppressWarnings("unchecked")
    void ReporteMensual(String fecha) {
        try {
            String ruta = "src/reportes/ReportMensual.jasper";
            Map parametros = new HashMap();
            parametros.put("fecha", "%/" + fecha + "%");
            JasperReport jr = (JasperReport) JRLoader.loadObjectFromFile(ruta);
            JasperPrint jp = JasperFillManager.fillReport(jr, parametros, cn.getConnection());
            JasperViewer jv = new JasperViewer(jp, false);
            jv.setVisible(true);
            jv.setTitle("Reporte Mensual");
            //cn.desconectar();

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    /**
     * Imprime reporte diario
     */
    @SuppressWarnings("unchecked")
    void ReporteDiario(String fecha) {
        try {
            String ruta = "src/reportes/ReportMensual.jasper";
            Map parametros = new HashMap();
            parametros.put("fecha", fecha);
            JasperReport jr = (JasperReport) JRLoader.loadObjectFromFile(ruta);
            JasperPrint jp = JasperFillManager.fillReport(jr, parametros, cn.getConnection());
            JasperViewer jv = new JasperViewer(jp, false);
            jv.setVisible(true);
            jv.setTitle("Reporte Diario del d칤a " + fecha);
            //cn.desconectar();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    @SuppressWarnings("unchecked")
    void ReporteMatricula(String matricula) {
        try {
            String ruta = "src/reportes/ReporteMatricula.jasper";
            Map parametros = new HashMap();
            parametros.put("matricula", matricula);

            JasperReport jr = (JasperReport) JRLoader.loadObjectFromFile(ruta);
            JasperPrint jp = JasperFillManager.fillReport(jr, parametros, cn.getConnection());
            JasperViewer jv = new JasperViewer(jp, false);
            jv.setVisible(true);
            jv.setTitle("Reporte Personal");
            //cn.desconectar();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    //Limpia los cuadros de texto del usuario
    private void Limpiar(){
        tFMatricula.setText("");
        tFNombres.setText("");
        tFApellidos.setText("");
        tFCarrera.setText("");
        tFDireccion.setText("");
        tFBMatricula.setText("");
    }


    private void tFBMatriculaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFBMatriculaKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tFBMatriculaKeyTyped

    private void tFMatriculaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFMatriculaKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_tFMatriculaKeyTyped

    private void jBReAnualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBReAnualActionPerformed
        ChecaMeses();
    }//GEN-LAST:event_jBReAnualActionPerformed

    /**
     * Imprime el reporte Anual
     */
    @SuppressWarnings("unchecked")
    void ReporteAnual(int ContPersona[][], int NumPrestamos[], int NumMaterial[][]) {
        try {
            String ruta = "src/reportes/ReporteAnual.jasper";
            Map parametros = new HashMap();
            parametros.put("ParA침o", String.valueOf(a침os.getYear()));
            //Parametros de Prof
            parametros.put("ProfEne", String.valueOf(ContPersona[0][0]));
            parametros.put("ProfFeb", String.valueOf(ContPersona[0][1]));
            parametros.put("ProfMar", String.valueOf(ContPersona[0][2]));
            parametros.put("ProfAbr", String.valueOf(ContPersona[0][3]));
            parametros.put("ProfMay", String.valueOf(ContPersona[0][4]));
            parametros.put("ProfJun", String.valueOf(ContPersona[0][5]));
            parametros.put("ProfJul", String.valueOf(ContPersona[0][6]));
            parametros.put("ProfAgs", String.valueOf(ContPersona[0][7]));
            parametros.put("ProfSep", String.valueOf(ContPersona[0][8]));
            parametros.put("ProfOct", String.valueOf(ContPersona[0][9]));
            parametros.put("ProfNov", String.valueOf(ContPersona[0][10]));
            parametros.put("ProfDic", String.valueOf(ContPersona[0][11]));
            parametros.put("TotalProf", String.valueOf(AuxProf));

            //Parametros de Alumno
            parametros.put("AlumnoEne", String.valueOf(ContPersona[1][0]));
            parametros.put("AlumnoFeb", String.valueOf(ContPersona[1][1]));
            parametros.put("AlumnoMar", String.valueOf(ContPersona[1][2]));
            parametros.put("AlumnoAbr", String.valueOf(ContPersona[1][3]));
            parametros.put("AlumnoMay", String.valueOf(ContPersona[1][4]));
            parametros.put("AlumnoJun", String.valueOf(ContPersona[1][5]));
            parametros.put("AlumnoJul", String.valueOf(ContPersona[1][6]));
            parametros.put("AlumnoAgs", String.valueOf(ContPersona[1][7]));
            parametros.put("AlumnoSep", String.valueOf(ContPersona[1][8]));
            parametros.put("AlumnoOct", String.valueOf(ContPersona[1][9]));
            parametros.put("AlumnoNov", String.valueOf(ContPersona[1][10]));
            parametros.put("AlumnoDic", String.valueOf(ContPersona[1][11]));
            parametros.put("TotalAlumno", String.valueOf(AuxAlumno));

            //Parametros de Otros
            parametros.put("OtrosEne", String.valueOf(ContPersona[2][0]));
            parametros.put("OtrosFeb", String.valueOf(ContPersona[2][1]));
            parametros.put("OtrosMar", String.valueOf(ContPersona[2][2]));
            parametros.put("OtrosAbr", String.valueOf(ContPersona[2][3]));
            parametros.put("OtrosMay", String.valueOf(ContPersona[2][4]));
            parametros.put("OtrosJun", String.valueOf(ContPersona[2][5]));
            parametros.put("OtrosJul", String.valueOf(ContPersona[2][6]));
            parametros.put("OtrosAgs", String.valueOf(ContPersona[2][7]));
            parametros.put("OtrosSep", String.valueOf(ContPersona[2][8]));
            parametros.put("OtrosOct", String.valueOf(ContPersona[2][9]));
            parametros.put("OtrosNov", String.valueOf(ContPersona[2][10]));
            parametros.put("OtrosDic", String.valueOf(ContPersona[2][11]));
            parametros.put("TotalOtros", String.valueOf(AuxOtros));

            //Parametros de Total (Usuarios)
            parametros.put("TotalEne", String.valueOf(ContPersona[3][0]));
            parametros.put("TotalFeb", String.valueOf(ContPersona[3][1]));
            parametros.put("TotalMar", String.valueOf(ContPersona[3][2]));
            parametros.put("TotalAbr", String.valueOf(ContPersona[3][3]));
            parametros.put("TotalMay", String.valueOf(ContPersona[3][4]));
            parametros.put("TotalJun", String.valueOf(ContPersona[3][5]));
            parametros.put("TotalJul", String.valueOf(ContPersona[3][6]));
            parametros.put("TotalAgs", String.valueOf(ContPersona[3][7]));
            parametros.put("TotalSep", String.valueOf(ContPersona[3][8]));
            parametros.put("TotalOct", String.valueOf(ContPersona[3][9]));
            parametros.put("TotalNov", String.valueOf(ContPersona[3][10]));
            parametros.put("TotalDic", String.valueOf(ContPersona[3][11]));
            parametros.put("TotalTotal", String.valueOf(AuxTotal));

            //Parametros de Libros
            parametros.put("LibrosEne", String.valueOf(NumMaterial[0][0]));
            parametros.put("LibrosFeb", String.valueOf(NumMaterial[0][1]));
            parametros.put("LibrosMar", String.valueOf(NumMaterial[0][2]));
            parametros.put("LibrosAbr", String.valueOf(NumMaterial[0][3]));
            parametros.put("LibrosMay", String.valueOf(NumMaterial[0][4]));
            parametros.put("LibrosJun", String.valueOf(NumMaterial[0][5]));
            parametros.put("LibrosJul", String.valueOf(NumMaterial[0][6]));
            parametros.put("LibrosAgs", String.valueOf(NumMaterial[0][7]));
            parametros.put("LibrosSep", String.valueOf(NumMaterial[0][8]));
            parametros.put("LibrosOct", String.valueOf(NumMaterial[0][9]));
            parametros.put("LibrosNov", String.valueOf(NumMaterial[0][10]));
            parametros.put("LibrosDic", String.valueOf(NumMaterial[0][11]));
            parametros.put("TotalLibros",String.valueOf(AuxLibros));

            //Parametros de Tesis
            parametros.put("TesisEne", String.valueOf(NumMaterial[1][0]));
            parametros.put("TesisFeb", String.valueOf(NumMaterial[1][1]));
            parametros.put("TesisMar", String.valueOf(NumMaterial[1][2]));
            parametros.put("TesisAbr", String.valueOf(NumMaterial[1][3]));
            parametros.put("TesisMay", String.valueOf(NumMaterial[1][4]));
            parametros.put("TesisJun", String.valueOf(NumMaterial[1][5]));
            parametros.put("TesisJul", String.valueOf(NumMaterial[1][6]));
            parametros.put("TesisAgs", String.valueOf(NumMaterial[1][7]));
            parametros.put("TesisSep", String.valueOf(NumMaterial[1][8]));
            parametros.put("TesisOct", String.valueOf(NumMaterial[1][9]));
            parametros.put("TesisNov", String.valueOf(NumMaterial[1][10]));
            parametros.put("TesisDic", String.valueOf(NumMaterial[1][11]));
            parametros.put("TotalTesis",String.valueOf(AuxTesis));

            //Parametros de PP (Revistas)
            parametros.put("PPEne", String.valueOf(NumMaterial[2][0]));
            parametros.put("PPFeb", String.valueOf(NumMaterial[2][1]));
            parametros.put("PPMar", String.valueOf(NumMaterial[2][2]));
            parametros.put("PPAbr", String.valueOf(NumMaterial[2][3]));
            parametros.put("PPMay", String.valueOf(NumMaterial[2][4]));
            parametros.put("PPJun", String.valueOf(NumMaterial[2][5]));
            parametros.put("PPJul", String.valueOf(NumMaterial[2][6]));
            parametros.put("PPAgs", String.valueOf(NumMaterial[2][7]));
            parametros.put("PPSep", String.valueOf(NumMaterial[2][8]));
            parametros.put("PPOct", String.valueOf(NumMaterial[2][9]));
            parametros.put("PPNov", String.valueOf(NumMaterial[2][10]));
            parametros.put("PPDic", String.valueOf(NumMaterial[2][11]));
            parametros.put("TotalPP",String.valueOf(AuxPP));

            //Parametros de Discos (CDS)
            parametros.put("CDEne", String.valueOf(NumMaterial[3][0]));
            parametros.put("CDFeb", String.valueOf(NumMaterial[3][1]));
            parametros.put("CDMar", String.valueOf(NumMaterial[3][2]));
            parametros.put("CDAbr", String.valueOf(NumMaterial[3][3]));
            parametros.put("CDMay", String.valueOf(NumMaterial[3][4]));
            parametros.put("CDJun", String.valueOf(NumMaterial[3][5]));
            parametros.put("CDJul", String.valueOf(NumMaterial[3][6]));
            parametros.put("CDAgs", String.valueOf(NumMaterial[3][7]));
            parametros.put("CDSep", String.valueOf(NumMaterial[3][8]));
            parametros.put("CDOct", String.valueOf(NumMaterial[3][9]));
            parametros.put("CDNov", String.valueOf(NumMaterial[3][10]));
            parametros.put("CDDic", String.valueOf(NumMaterial[3][11]));
            parametros.put("TotalCD",String.valueOf(AuxCD));

            //Parametros de Prestamo Externo (PEx)
            parametros.put("PExEne", String.valueOf(NumPrestamos[0]));
            parametros.put("PExFeb", String.valueOf(NumPrestamos[1]));
            parametros.put("PExMar", String.valueOf(NumPrestamos[2]));
            parametros.put("PExAbr", String.valueOf(NumPrestamos[3]));
            parametros.put("PExMay", String.valueOf(NumPrestamos[4]));
            parametros.put("PExJun", String.valueOf(NumPrestamos[5]));
            parametros.put("PExJul", String.valueOf(NumPrestamos[6]));
            parametros.put("PExAgs", String.valueOf(NumPrestamos[7]));
            parametros.put("PExSep", String.valueOf(NumPrestamos[8]));
            parametros.put("PExOct", String.valueOf(NumPrestamos[9]));
            parametros.put("PExNov", String.valueOf(NumPrestamos[10]));
            parametros.put("PExDic", String.valueOf(NumPrestamos[11]));
            parametros.put("TotalPrestamo", String.valueOf(AuxPrestamo));

            //Parametros de Internet
            parametros.put("InternetEne", String.valueOf(NumMaterial[4][0]));
            parametros.put("InternetFeb", String.valueOf(NumMaterial[4][1]));
            parametros.put("InternetMar", String.valueOf(NumMaterial[4][2]));
            parametros.put("InternetAbr", String.valueOf(NumMaterial[4][3]));
            parametros.put("InternetMay", String.valueOf(NumMaterial[4][4]));
            parametros.put("InternetJun", String.valueOf(NumMaterial[4][5]));
            parametros.put("InternetJul", String.valueOf(NumMaterial[4][6]));
            parametros.put("InternetAgs", String.valueOf(NumMaterial[4][7]));
            parametros.put("InternetSep", String.valueOf(NumMaterial[4][8]));
            parametros.put("InternetOct", String.valueOf(NumMaterial[4][9]));
            parametros.put("InternetNov", String.valueOf(NumMaterial[4][10]));
            parametros.put("InternetDic", String.valueOf(NumMaterial[4][11]));
            parametros.put("TotalInternet", String.valueOf(AuxInternet));

            //Parametros de Constancia de No Adeudo (CNA)
            parametros.put("CNAEne", String.valueOf(NumMaterial[5][0]));
            parametros.put("CNAFeb", String.valueOf(NumMaterial[5][1]));
            parametros.put("CNAMar", String.valueOf(NumMaterial[5][2]));
            parametros.put("CNAAbr", String.valueOf(NumMaterial[5][3]));
            parametros.put("CNAMay", String.valueOf(NumMaterial[5][4]));
            parametros.put("CNAJun", String.valueOf(NumMaterial[5][5]));
            parametros.put("CNAJul", String.valueOf(NumMaterial[5][6]));
            parametros.put("CNAAgs", String.valueOf(NumMaterial[5][7]));
            parametros.put("CNASep", String.valueOf(NumMaterial[5][8]));
            parametros.put("CNAOct", String.valueOf(NumMaterial[5][9]));
            parametros.put("CNANov", String.valueOf(NumMaterial[5][10]));
            parametros.put("CNADic", String.valueOf(NumMaterial[5][11]));
            parametros.put("TotalCNA", String.valueOf(AuxCNA));

            //Reporte de totales
            parametros.put("TotalMaterial", String.valueOf(AuxLibros+AuxTesis+AuxPP+AuxCD));
            parametros.put("TotalServicios", String.valueOf(AuxPrestamo+AuxInternet+AuxCNA));
            JasperReport jr = (JasperReport) JRLoader.loadObjectFromFile(ruta);
            JasperPrint jp = JasperFillManager.fillReport(jr, parametros, cn.getConnection());
            JasperViewer jv = new JasperViewer(jp, false);
            jv.setVisible(true);
            jv.setTitle("Reporte Anual");
            //cn.desconectar();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    //Invoca los meses del a침o dado
    private void ChecaMeses() {
        String sql;
        int ContPersona[][] = new int[4][12];
        for (int i = 0; i < 12; i++) {//Totales
            sql = "Select count(*) from registro where fecha like '%/" + (i + 1) + "/" + a침os.getYear() + "';";
            ContPersona[3][i] = ReTotalMes(sql);
            AuxTotal=AuxTotal+ReTotalMes(sql);
            
        }

        int TipoUsuario[];
        for (int i = 0; i < 12; i++) {//Cuenta alumnos, profesores, etc.
            sql = "Select idPersona from registro where fecha like '%/" + (i + 1) + "/" + a침os.getYear() + "';";
            TipoUsuario = ReID(sql, ContPersona[3][i]);

            for (int j = 0; j < TipoUsuario.length; j++) {
                sql = "SELECT Usuario FROM Personas WHERE IdPersonas ='" + TipoUsuario[j] + "';";
                if (TipoPersona(sql).equals("Maestro")) {
                    ContPersona[0][i]++;
                    AuxProf=AuxProf+1;
                } else if (TipoPersona(sql).equals("Alumno")) {
                    ContPersona[1][i]++;
                    AuxAlumno=AuxAlumno+1;
                } else {
                    ContPersona[2][i]++;
                    AuxOtros=AuxOtros+1;
                }

            }

        }

        int NumPrestamos[] = new int[12];
        for (int i = 0; i < 11; i++) {//Cuenta Prestamos
            sql = "SELECT count(*) FROM Prestamos WHERE FechaS like'%/" + (i + 1) + "/" + a침os.getYear() + "';";
            NumPrestamos[i] = CuentaPrestamo(sql);
        }

        int NumMaterial[][] = new int[6][12];
        for (int i = 0; i < 11; i++) {//Cuenta Material
            //System.out.println("Inicial valor de i --->"+i);
            sql = "SELECT Material,count(Material) as TOTAL FROM Registro WHERE Fecha like '%/"+(i+1)+"/" + a침os.getYear() + "' GROUP BY Material;";
            System.out.println("Ahora el valor de i --->"+(i+1));
            try {
                Statement st = cn.getConnection().createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()) {
                    if (rs.getString(1).equals("LIBRO")) {
                        NumMaterial[0][i] = rs.getInt(2);
                        AuxLibros=AuxLibros+rs.getInt(2);
                        System.out.println("Libro--> "+rs.getInt(2));
                    } else if (rs.getString(1).equals("TESIS")) {
                        NumMaterial[1][i] = rs.getInt(2);
                        AuxTesis=AuxTesis+rs.getInt(2);
                        System.out.println("Tesis--> "+rs.getInt(2));
                    } else if (rs.getString(1).equals("REVISTAS")) {
                        NumMaterial[2][i] = rs.getInt(2);
                        AuxPP=AuxPP+rs.getInt(2);
                        System.out.println("PP--> "+rs.getInt(2));
                    } else if (rs.getString(1).equals("CD")) {
                        NumMaterial[3][i] = rs.getInt(2);
                        AuxCD=AuxCD+rs.getInt(2);
                    } else if (rs.getString(1).equals("COMPUTO")) {
                        NumMaterial[4][i] = rs.getInt(2);
                        AuxInternet=AuxInternet+rs.getInt(2);
                        System.out.println("Computo--> "+rs.getInt(2));
                    } else if (rs.getString(1).equals("CONSTANCIA NO ADEUDO")) {
                        NumMaterial[5][i] = rs.getInt(2);
                        AuxCNA=AuxCNA+rs.getInt(2);
                        System.out.println("CNA--> "+rs.getInt(2));
                    }

                }
                //cn.desconectar();
            } catch (Exception ex) {System.out.println(ex.getMessage());}
        }
        ReporteAnual(ContPersona, NumPrestamos, NumMaterial);

    }

    //M칠todo auxiliar para contar los prestamos dado el mes.
    private int CuentaPrestamo(String sql) {
        int Prestamo = 0;

        try {
            Statement st = cn.getConnection().createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                AuxPrestamo=AuxPrestamo+rs.getInt(1);
                return Prestamo = Integer.parseInt(rs.getString(1));
            }
            //cn.desconectar();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        return 0;
    }

    //Regresa el tipo de persona, alumno, maestro, etc.
    private String TipoPersona(String sql) {
        try {
            Statement st = cn.getConnection().createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                return rs.getString(1);
            }
            //cn.desconectar();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        return "";
    }

    //Regresa los IDs de registro
    private int[] ReID(String sql, int i) {
        int Persona[] = new int[i];
        try {
            Statement st = cn.getConnection().createStatement();
            ResultSet rs = st.executeQuery(sql);
            int j = 0;
            while (rs.next()) {

                Persona[j] = Integer.parseInt(rs.getString(1));
                j++;
            }
            //cn.desconectar();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

        return Persona;
    }

    //Regresa el total de cada mes
    private int ReTotalMes(String sql) {
        try {
            Statement st = cn.getConnection().createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                return Integer.parseInt(rs.getString(1));
            }
            //cn.desconectar();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

        return 0;
    }


    private void tFBMatriculaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tFBMatriculaKeyReleased
        try {
            String sql = "SELECT matricula, carrera, nombres, apellidos, direccion, usuario FROM personas where matricula like '" + this.tFBMatricula.getText() + "%';";
            mostrar(sql);
        } catch (Exception ex) {
            Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tFBMatriculaKeyReleased

    private void jMDeudoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMDeudoresMouseClicked
        Deudor ventana;
        try {
            ventana = new Deudor();
            ventana.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMDeudoresMouseClicked

    private void jBReMensualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBReMensualActionPerformed
        String fecha = (this.meses.getMonth() + 1) + "/" + this.a침os.getYear();
        ReporteMensual(fecha);
    }//GEN-LAST:event_jBReMensualActionPerformed

    private void jMSugerenciasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMSugerenciasMouseClicked
        Sugerencia ventana;
        try {
            ventana = new Sugerencia();
            ventana.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMSugerenciasMouseClicked

    private void jTFDiaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFDiaKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_jTFDiaKeyTyped

    private void jMVisualizadorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMVisualizadorMouseClicked
        SugerenciasView ventana;
        try {
            ventana = new SugerenciasView();
            ventana.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMVisualizadorMouseClicked

    private void tFBMatriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tFBMatriculaActionPerformed
        ReporteMatricula(tFBMatricula.getText());
    }//GEN-LAST:event_tFBMatriculaActionPerformed

    private void jMVisualizador1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMVisualizador1MouseClicked
        Libros ventana;
        try {
            ventana = new Libros();
            ventana.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMVisualizador1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Administracion().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Administracion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JYearChooser a침os;
    private javax.swing.JButton jBReAnual;
    private javax.swing.JButton jBReMensual;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    public static javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMDeudores;
    private javax.swing.JMenu jMSalir;
    private javax.swing.JMenu jMSugerencias;
    private javax.swing.JMenu jMVisualizador;
    private javax.swing.JMenu jMVisualizador1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFDia;
    private javax.swing.JTable jTable1;
    private com.toedter.calendar.JMonthChooser meses;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFApellidos;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFBMatricula;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFCarrera;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFDireccion;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFMatricula;
    private org.edisoncor.gui.textField.TextFieldRectBackground tFNombres;
    // End of variables declaration//GEN-END:variables

    //metodo mostrar y buscar
    void mostrar(String sql) throws Exception {

        DefaultTableModel Modelo = new DefaultTableModel();
        Modelo.addColumn("Matricula");
        Modelo.addColumn("Carrera");
        Modelo.addColumn("Nombres");
        Modelo.addColumn("Apellido|s");
        Modelo.addColumn("Direccion");
        Modelo.addColumn("Usuario");
        jTable1.setModel(Modelo);
        if (sql.equals("")) {
            sql = "SELECT matricula, carrera, nombres, apellidos, direccion, usuario FROM personas";
        }

        String[] datos = new String[6];
        try {
            Statement st = cn.getConnection().createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                datos[0] = rs.getString(1);
                datos[1] = rs.getString(2);
                datos[2] = rs.getString(3);
                datos[3] = rs.getString(4);
                datos[4] = rs.getString(5);
                datos[5] = rs.getString(6);
                Modelo.addRow(datos);
            }
            jTable1.setModel(Modelo);
            //cn.desconectar();
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }

}
